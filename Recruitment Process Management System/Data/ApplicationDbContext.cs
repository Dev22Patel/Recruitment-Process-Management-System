using Microsoft.EntityFrameworkCore;
using Recruitment_Process_Management_System.Models.Entities;

namespace Recruitment_Process_Management_System.Data
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }

        public DbSet<User> Users { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<Candidate> Candidates { get; set; }
        public DbSet<Skill> Skills { get; set; }
        public DbSet<CandidateSkill> CandidateSkills { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // User configuration - IMPORTANT: Configure GUID generation
            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.Id);

                // Configure GUID to be auto-generated by SQL Server
                entity.Property(e => e.Id)
                      .HasColumnType("uniqueidentifier")
                      .HasDefaultValueSql("NEWID()");

                // Configure CreatedBy as nullable GUID
                entity.Property(e => e.CreatedBy)
                      .HasColumnType("uniqueidentifier")
                      .IsRequired(false);

                // Unique email constraint
                entity.HasIndex(e => e.Email).IsUnique();
            });

            // Role configuration (keep as int - this is fine)
            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            // UserRole composite key configuration
            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasKey(ur => new { ur.UserId, ur.RoleId });

                // Configure UserId as GUID
                entity.Property(e => e.UserId)
                      .HasColumnType("uniqueidentifier");

                entity.HasOne(ur => ur.User)
                      .WithMany(u => u.UserRoles)
                      .HasForeignKey(ur => ur.UserId)
                      .OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(ur => ur.Role)
                      .WithMany(r => r.UserRoles)
                      .HasForeignKey(ur => ur.RoleId)
                      .OnDelete(DeleteBehavior.Cascade);
            });

            // Candidate configuration
            modelBuilder.Entity<Candidate>(entity =>
            {
                entity.HasKey(e => e.Id);

                // Configure Candidate Id as GUID
                entity.Property(e => e.Id)
                      .HasColumnType("uniqueidentifier")
                      .HasDefaultValueSql("NEWID()");

                // Configure UserId as GUID foreign key
                entity.Property(e => e.UserId)
                      .HasColumnType("uniqueidentifier");

                // Configure the foreign key relationship
                entity.HasOne(c => c.User)
                      .WithMany() // User doesn't have a collection of Candidates
                      .HasForeignKey(c => c.UserId)
                      .OnDelete(DeleteBehavior.Cascade);

                // Configure nullable columns
                entity.Property(e => e.CurrentLocation).IsRequired(false);
                entity.Property(e => e.TotalExperience).IsRequired(false);
                entity.Property(e => e.CurrentCompany).IsRequired(false);
                entity.Property(e => e.CurrentSalary).IsRequired(false);
                entity.Property(e => e.ExpectedSalary).IsRequired(false);
                entity.Property(e => e.NoticePeriod).IsRequired(false);
                entity.Property(e => e.Source).IsRequired(false);
                entity.Property(e => e.CollegeName).IsRequired(false);
                entity.Property(e => e.GraduationYear).IsRequired(false);
                entity.Property(e => e.Degree).IsRequired(false);
                entity.Property(e => e.ResumeFilePath).IsRequired(false);
            });

            // Skill configuration
            modelBuilder.Entity<Skill>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id)
                      .HasColumnType("uniqueidentifier")
                      .HasDefaultValueSql("NEWID()");

                entity.HasIndex(e => e.SkillName).IsUnique();
            });

            // CandidateSkill configuration - THIS FIXES THE CASCADE DELETE CONFLICT
            modelBuilder.Entity<CandidateSkill>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id)
                      .HasColumnType("uniqueidentifier")
                      .HasDefaultValueSql("NEWID()");

                entity.Property(e => e.CandidateId)
                      .HasColumnType("uniqueidentifier");
                entity.Property(e => e.SkillId)
                      .HasColumnType("uniqueidentifier");


                // Unique constraint - one candidate can't have duplicate skills
                entity.HasIndex(e => new { e.CandidateId, e.SkillId })
                      .IsUnique();

                entity.HasOne(cs => cs.Candidate)
                      .WithMany(c => c.CandidateSkills)
                      .HasForeignKey(cs => cs.CandidateId)
                      .OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(cs => cs.Skill)
                      .WithMany(s => s.CandidateSkills)
                      .HasForeignKey(cs => cs.SkillId)
                      .OnDelete(DeleteBehavior.Cascade);
            });

            // Seed default roles
            modelBuilder.Entity<Role>().HasData(
                new Role { Id = 1, RoleName = "Admin", IsActive = true },
                new Role { Id = 2, RoleName = "HR", IsActive = true },
                new Role { Id = 3, RoleName = "Interviewer", IsActive = true },
                new Role { Id = 4, RoleName = "Candidate", IsActive = true }
            );
        }
    }
}